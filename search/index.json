[{"content":"登录注册 https://university.alchemy.com/signup 登录成功 Etherum Bootcamp 我们很高兴终于向全世界发布了这个期待已久的内容。这个训练营以前每人价值 3000 美元！😱 Alchemy 和 ChainShot 联手使这个训练营完全免费，以进一步加强 web3 开发生态系统。\n以太坊开发人员训练营已向全球数百名开发人员传授了如何在以太坊上构建智能合约和 dApp。我们很高兴看到您构建下一个 Facebook 和 Microsoft\u0026hellip;🛠\n最大化 Bootcamp 🚀 价值的最佳实践 以下是最大限度地提高您的 AU 学生体验的快速建议列表：\n社区，社区，社区！ 🏘 您不需要独自处理所有这些内容！参与进来，积极行动，需要帮助时伸出援手！找到你的利基市场，找到志同道合的人\u0026hellip;\u0026hellip;然后和他们一起构建很酷的东西 - 这就是方法。 “最好的学习方式是教书。”如果您看到其他人被困住了，请帮助他们！这不仅会让您在 AU 社区中获得街头信誉，还可以帮助您巩固自己对这些概念的理解。让我们看看你有什么！\n请务必加入 AU Discord 与同行联系并一起工作！\n选择自己的节奏 🏃 ♂️ AU 正在发布其大部分内容以进行异步学习，这意味着该课程将按照您选择的速度完成。但是，AU 讲师将在 AU Discord 中举办每周一次的市政厅和社区聚会，该聚会将遵循为期 7 周的结构。我们鼓励您参加这些会议，并以 7 周的形式跟上内容。 注意：对于抢先体验，我们将每周发布内容！\n你投入♻️什么就得到什么 许多人问我们，一旦他们真正完成了内容，会发生什么。事实是，这真的取决于学生。一般来说，那些将时间投入到真正的学习和社区网络的人，可以获得 2 到 10 倍的价值。\n学习！📚 对学习感到兴奋！进入兔子洞。采用学生心态。阅读和研究让您充满激情的事物。这些技术总有一天会改变世界，因此请带着兴奋和耐心学习。\n如果你卡住了\u0026hellip;\u0026hellip;🚫 \u0026hellip;这是过程的正常部分！每当您遇到任何问题时，我们的建议始终是一个固定的流程：\n#1.DYOR - 做你自己的研究吧！谷歌一下，看看你是否能找到任何与你的问题类似的问题并以这种方式进行调试。\n我们首先建议这样做并不是因为我们不想帮助您（我们当然想帮助您），相反，真正的开发人员最擅长解锁自己并动态地找到他们需要的资源。DYOR 可能是所有开发人员的 #1 技能，无论是否是 web3。所以，擅长 DYOR，你也会擅长开发！\n如果您在 DYOR 中没有找到任何东西\u0026hellip;\u0026hellip;\n#2.查看 AU Discord 频道并向社区寻求帮助！请记住：成千上万的学生同时参加这些课程。讲师总是希望提供帮助，但由于讲师要少得多，因此您的第二个联系人应该是更广泛的 AU 社区。\n给我们反馈 👀 请记住，这是一个测试版（又名：抢先体验）！我们非常努力地让内容和网站处于非常好的状态，但不可避免地，有些人会在这里和那里遇到错误。如果您遇到任何错误或问题，请确保在 AU 控制面板中选择该按钮。然后，您将能够指定错误的性质并报告它。我们非常感谢您的帮助、抢先体验社区和耐心，我们将将其打造成世界上最棒的训练营！Give us feedback! 反馈-SC\n内容格式 📚 Alchemy University 的内容包含教学视频、研究文章、指南、教程和编码挑战。\n以太坊开发者训练营的内容为期 7 周。每天都涵盖一个新主题，目的是让概念缓慢但肯定地建立起来。每天的内容通常分为：\n1 个 Loom 讲师视频 1 篇文章，涵盖与讲师视频相同的材料 1 编码挑战 1 份补充阅读材料 1 个周末项目（每周） 讲师视频和文章旨在介绍该模块的指南和编码挑战中进一步探讨的概念。\n建议大家既看视频又看文字内容！\n对于编码挑战，您还将在专有的 Alchemy IDE 中工作，这是一种完全浏览器内的体验，旨在让您无需任何环境设置即可启动并运行编码 JS、Solidity 等。\n课程结束后我可以做什么？💯 如上所述，你投入什么就得到什么。许多训练营毕业生在各个领域都取得了成功：\n有些人选择奉献他们的新技能来赢得世界各地的所有 ETHGlobal 黑客马拉松。🏗 有些人利用他们新获得的技能申请 OpenZeppelin、Uniswap、Alchemy、OpenSea 等公司的 web3 职位。👀 有些人加入了 Developer DAO 和 Raid Guild 等高影响力的 DAO。🌐 有些人选择创办自己的公司。一个例子是 Stader Labs，它最近以 $450M 的估值筹集。🤑 有些人使用 web3 学习作为进一步掌握计算机科学和软件开发📚的跳板 有些人追求学术轨道并研究比特币、以太坊和区块链技术（有些人是希望以出色的技能从大学毕业的在校学生！👨‍🎓👩‍🎓 有些人选择成为传奇并帮助其他人也通过 AU 学习并获得积极的体验 - 成为校友的最佳场所是在 AU Discord 中。🧠👨‍🏫👩‍🏫 天空是极限。尽早开始考虑您想要优化的目标！而且不要给自己太大压力！最坏的情况是，您掌握了一些软件开发技能！🎸🎶 摇滚音乐提示 🎸🎶\n每周内容细分 📝 以太坊开发者训练营内容旨在每周都建立在自身基础上。以下是每周预期的粗略概述：\n第 1 周 我们首先从介绍密码学基础知识开始。什么是哈希函数？是什么让它们与众不同？它们对区块链有何重要意义？然后，在学习哈希等加密原语的背景下，我们深入研究了区块链的工作原理：共识机制。基本上，去中心化网络到底是如何就什么是什么达成一致。第 1 周以周末的项目结束：使用您在一周中学到的知识创建一个安全的公有 - 私有密钥服务器。\n第 2 周 本周，我们开始介绍一些用于使区块链工作的数据结构，主要是大量的树！我们还将比特币用于跟踪余额的 UTXO 模型与以太坊基于账户的模型进行了比较。\n第 3 周 这是我们从第 1 周和第 2 周涵盖的繁重计算机科学基础知识（密码学、p2p 网络、数据结构等）中休息，最后开始关注以太坊的第一周。我们介绍了读取请求和写入请求之间的区别，以及如何使用标准 Ethereum 节点上加载的众所周知的 JSON-RPC 接口发送/接收这些请求（作为响应返回）。\n第 4 周 我们介绍了智能合约的基础知识（为什么智能合约很酷？）以及如何使用 Solidity 对它们进行编程。\n第 5 周 进一步掌握 Solidity 语言。\n第 6 周 进一步掌握 Solidity 语言。涵盖高级概念。\n第 7 周 探索智能合约用例，使用 Aave、Uniswap 和 Chainlink 等应用程序来深入学习并为学生项目获得灵感。此时，学生应该开始构思自己的项目。 上\n准备好开始了吗?\u0026hellip;🤿 你明白了！👏💪\n区块链和加密 欢迎来到 Alchemy University 的以太坊开发者训练营！在本课程中，我们将带您了解在 Ethereum 区块链上构建、部署、测试和交互程序所需的一切知识。在本课程的其余部分，我们将这些程序称为智能合约，您很快就会明白为什么使用这个术语。首先，让我们深入了解区块链的用途，并讨论我们的第一个核心加密原语：加密哈希函数\n在此处访问幻灯片。\n区块链 要了解区块链的工作原理，让我们从一些高级问题开始。\n区块链的目的是什么？ 区块链的目的是让计算机网络就数据的共同状态达成一致。简单明了。任何个人或组织都应该能够参与此过程。任何个人或组织都不应能够控制此过程。\n通常，术语 consensus 用于描述网络就数据状态达成一致。关于区块链，您会经常听到这个词！\n所以你有它！区块链的高级目标。还不错，是吧？\n让我们通过区块链最常见的用例进一步探讨这个问题：加密货币 - 当今现代社会的一个断断续续的热门话题！\n为什么加密货币需要区块链？ 为了理解为什么数字货币需要区块链，让我们想象一种没有区块链的天真数字货币。\n让我们拿一个电子表格，给我们所有的朋友一些钱：\n名字\t平衡 爱丽丝\t10 鲍勃\t10 查理\t10 甜！每个人都从 10 个钱开始。\n现在 Alice 想从 Bob 那里买东西，所以她付给他 5 钱。她告诉您（簿记员）将 5 笔款项转给 Bob。\n当然，你说：\n名字\t平衡 爱丽丝\t5 鲍勃\t15 查理\t10 非常好！每个人的余额都会更新。\n此时，您可能会想“整个数字货币的事情真的没什么大不了的！或者，更有可能的是，您正在考虑此方案的所有问题：\nAlice、Bob 和 Charlie 需要相信你不会欺骗他们。作为簿记员，您需要抵制贿赂！ Alice、Bob 和 Charlie 需要一种方法来轻松查看他们的余额，该方法广泛可用且是最新的。 Alice、Bob 和 Charlie 邀请更多朋友加入您的货币圈，很快，记账工作就变得难以处理。 我们知道如何用我们的编程技能解决问题 #2 和 #3！我们可以构建一个具有出色 UI 和 API 进行交易的网站！\n但是问题 #1 呢？我们如何解决信任问题？\n这是 Cryptography Enthusiasts 多年来一直存在的问题。在内心深处，许多自称密码朋克的人觉得解决方案似乎就在加密技术领域的某个地方，但没有人能够创建一个万无一失的系统。\n2008 年，这样一个系统被想象出来。一位或多位化名中本聪的人发布了一份比特币白皮书。在本文中，他们描述了一个系统，该系统将创建一个用于价值交换的点对点网络。该系统将结合多年的密码学研究和博弈论财务激励措施，以创建一个安全、可扩展的网络。该论文描述了以加密方式连接在一起的区块链。这后来被称为区块链。\n总而言之，区块链的发明是为了解决信任问题。创建一个完全中立且抵制任何审查或贿赂的系统。\n智能合约区块链 智能合约区块链为开发人员提供了一种将代码运行位置去中心化的方法。这样，代码就可以真正成为公共资源。这意味着代码可以在没有任何直接所有权的情况下运行，使其抗审查且透明可验证。\n需要深入研究的一点是，去中心化与代码本身无关，而是与代码如何执行有关。例如，让我们快速浏览一下一些 Solidity 智能合约代码：\n// this data structure will keep track of which address has a balance mapping(address =\u0026gt; uint) balances;\nfunction transfer(address to, uint amount) external { // subtract the amount from the sender\u0026rsquo;s balance balances[msg.sender] -= amount;\n// add the amount to the recipient\u0026rsquo;s balance balances[to] += amount; } 这个函数是 ERC20 代币的基本要素，我们将在本课程后面讨论。从编程的角度来看，您将看到这里的函数并没有什么特别之处。来自其他语言的这段代码可能看起来很熟悉。transfer\n使这段代码成为智能合约的关键区别在于，当您获取此代码、编译它并将其部署到去中心化区块链时。当您这样做时，代码将在区块链上公开可用，并且网络中的节点将通过区块链协议的经济激励来执行代码的逻辑。\n如果目前听起来有点复杂，请不要担心！ 这里的一个关键要点是，智能合约是始终按照编程方式运行的代码。我们将一步一步来，您很快就会看到区块链如何执行这些规则。\n加密哈希函数 在进一步深入研究之前，我们必须了解加密哈希函数。让我们把这个术语分解一下。哈希函数是一个函数，它接受任何大小的输入并将其转换为固定大小的输出。让我们想象一个哈希函数，它接受任意大小的输入并返回一个固定的 32 字节输出：\n输入\t输入大小\t输出\t输出大小 52\t8 字节\t0x41cf\u0026hellip;\t32 字节 “快乐时光”\t22 字节\t0xd6bf\u0026hellip;\t32 字节 monalisa.jpg\t875000 字节\t0x7cde\u0026hellip;\t32 字节 worldseries.mp4\t1.6e+10 字节\t0x9c0e\u0026hellip;\t32 字节 这些输入从上到下变大，但它们始终映射到 32 字节的输出。哈希函数有许多不同的算法，它们可以接受这些输入并创建固定大小的输出。\n我们将重点介绍的哈希函数的具体类型是加密哈希函数。这些哈希函数需要 5 个特定属性。他们必须是：\n确定性 - 一个特定输入始终映射到相同的特定输出 伪随机 - 无法根据类似输入的输出来猜测输出 单向 - 如果有人为您提供新输出，如果不猜测，您将无法确定输入 快速计算 - 对于计算机来说，它必须是快速计算 抗碰撞 - 发生碰撞的几率应该非常小 挑战自我：尝试使用这个 sha256 在线工具。您能向自己证明这些特性中的每一个吗？\n使用安全的加密哈希函数，您可以创建输入的唯一、固定大小的表示形式，而不管其大小如何。对于区块链，此功能对于节省空间至关重要。在许多情况下，区块链和智能合约不需要存储输入，它们可以只存储哈希输出。加密哈希函数对于我们将要讨论的第一个成功的区块链共识机制也非常重要：工作量证明。\n让我们在下一个练习中尝试使用加密哈希函数！\nLearn JavaScript Learn Solidity AA Fundammentals Smart Accounts ","date":"2024-09-09T00:00:00Z","image":"https://zhanghony.github.io/post/solidity/background.jpg","permalink":"https://zhanghony.github.io/p/alchemy/","title":"alchemy"},{"content":"查看github 最多stars 1 language:solidity ","date":"2024-09-09T00:00:00Z","permalink":"https://zhanghony.github.io/p/github_moststar/","title":"github学习"},{"content":"","date":"2024-09-09T00:00:00Z","permalink":"https://zhanghony.github.io/p/yearn-protocol/","title":"yearn-protocol"},{"content":"一个简单的go示例\n1 2 3 4 5 6 7 8 9 10 package main import ( \u0026#34;fmt\u0026#34; \u0026#34;time\u0026#34; ) func main() { fmt.Println(time.Now().Format(\u0026#34;2006-01-02 15:04:05\u0026#34;)) } 输出：2022-08-04 09:43:56\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 const ( _ = iota stdLongMonth = iota + stdNeedDate // \u0026#34;January\u0026#34; stdMonth // \u0026#34;Jan\u0026#34; stdNumMonth // \u0026#34;1\u0026#34; stdZeroMonth // \u0026#34;01\u0026#34; stdLongWeekDay // \u0026#34;Monday\u0026#34; stdWeekDay // \u0026#34;Mon\u0026#34; stdDay // \u0026#34;2\u0026#34; stdUnderDay // \u0026#34;_2\u0026#34; stdZeroDay // \u0026#34;02\u0026#34; stdUnderYearDay // \u0026#34;__2\u0026#34; stdZeroYearDay // \u0026#34;002\u0026#34; stdHour = iota + stdNeedClock // \u0026#34;15\u0026#34; stdHour12 // \u0026#34;3\u0026#34; stdZeroHour12 // \u0026#34;03\u0026#34; stdMinute // \u0026#34;4\u0026#34; stdZeroMinute // \u0026#34;04\u0026#34; stdSecond // \u0026#34;5\u0026#34; stdZeroSecond // \u0026#34;05\u0026#34; stdLongYear = iota + stdNeedDate // \u0026#34;2006\u0026#34; stdYear // \u0026#34;06\u0026#34; stdPM = iota + stdNeedClock // \u0026#34;PM\u0026#34; stdpm // \u0026#34;pm\u0026#34; stdTZ = iota // \u0026#34;MST\u0026#34; stdISO8601TZ // \u0026#34;Z0700\u0026#34; // prints Z for UTC stdISO8601SecondsTZ // \u0026#34;Z070000\u0026#34; stdISO8601ShortTZ // \u0026#34;Z07\u0026#34; stdISO8601ColonTZ // \u0026#34;Z07:00\u0026#34; // prints Z for UTC stdISO8601ColonSecondsTZ // \u0026#34;Z07:00:00\u0026#34; stdNumTZ // \u0026#34;-0700\u0026#34; // always numeric stdNumSecondsTz // \u0026#34;-070000\u0026#34; stdNumShortTZ // \u0026#34;-07\u0026#34; // always numeric stdNumColonTZ // \u0026#34;-07:00\u0026#34; // always numeric stdNumColonSecondsTZ // \u0026#34;-07:00:00\u0026#34; stdFracSecond0 // \u0026#34;.0\u0026#34;, \u0026#34;.00\u0026#34;, ... , trailing zeros included stdFracSecond9 // \u0026#34;.9\u0026#34;, \u0026#34;.99\u0026#34;, ..., trailing zeros omitted stdNeedDate = 1 \u0026lt;\u0026lt; 8 // need month, day, year stdNeedClock = 2 \u0026lt;\u0026lt; 8 // need hour, minute, second stdArgShift = 16 // extra argument in high bits, above low stdArgShift stdSeparatorShift = 28 // extra argument in high 4 bits for fractional second separators stdMask = 1\u0026lt;\u0026lt;stdArgShift - 1 // mask out argument ) 所以，其实答案已经有了，我们对照一下我们的参数 2006-01-02 15:04:05，可以很简单在上述常量里面找到对应的常量：\n2006 =\u0026gt; stdLongYear 01 =\u0026gt; stdZeroMonth 02 =\u0026gt; stdZeroDay 15 =\u0026gt; stdHour 04 =\u0026gt; stdZeroMinute 05 =\u0026gt; stdZeroSecond 而 layout 参数里面的 - 以及 : 都会原样输出。 ","date":"2022-08-04T09:43:56Z","permalink":"https://zhanghony.github.io/p/go_time/","title":"go 中如何格式化时间"},{"content":"Uniswap：去中心化的加密货币交易平台。\nCompound：去中心化借贷平台。\nAave：提供各种借贷和储蓄服务。\nMakerDAO：稳定币 DAI 的发行和管理平台。\nSynthetix：合成资产发行和交易平台。\nCurve Finance：专注于稳定币交易的去中心化交易所。\n1inch：聚合多个去中心化交易所的交易平台\n","date":"2020-09-09T00:00:00Z","permalink":"https://zhanghony.github.io/p/web3/","title":"DApp"},{"content":"#ganach sdg\n","date":"2020-09-09T00:00:00Z","permalink":"https://zhanghony.github.io/p/ganache/","title":"ganache安装"},{"content":"问题描述 github浏览器能打开，命令行却连不上\n查看代理命令 1 2 git config --global --get http.proxy git config --global --get https.proxy 取消代理命令 1 2 git config --global --unset http.proxy git config --global --unset https.proxy 配置http代理 1 2 git config --global http.proxy 127.0.0.1:7890 git config --global https.proxy 127.0.0.1:7890 ","date":"2020-09-09T00:00:00Z","permalink":"https://zhanghony.github.io/p/github/","title":"github网络问题"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;UL2MindMap Example\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;mindmap.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;mindmap mindmap-md\u0026#34;\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;https://hunterx.xyz/use-mindmap-in-hexo.html\u0026#34;\u0026gt;在 Hexo 中使用思维导图\u0026lt;/a\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;前言\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; 操作指南 \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;准备需要的文件\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;为主题添加 CSS/JS 文件\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;使用方法\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;mindmap mindmap-lg\u0026#34;\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;https://hunterx.xyz/use-mindmap-in-hexo.html\u0026#34;\u0026gt;在 Hexo 中使用思维导图\u0026lt;/a\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;前言\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; 操作指南 \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;准备需要的文件\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;为主题添加 CSS/JS 文件\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;使用方法\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;script src=\u0026#34;https://code.jquery.com/jquery-3.3.1.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;js/kity.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;js/kityminder.core.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;js/mindmap.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/html\u0026gt; 1 2 3 4 5 6 7 8 9 pragma solidity ^0.8.0; contract LoginVerification { function verifySignature(address userAddress, bytes memory signature) public pure returns (bool) { bytes32 messageHash = keccak256(abi.encodePacked(userAddress)); address recoveredAddress = ecrecover(messageHash, signature); return recoveredAddress == userAddress; } } solidsf\nsdfsf\n","date":"2020-09-09T00:00:00Z","permalink":"https://zhanghony.github.io/p/solidity/","title":"solidity大纲"},{"content":"solidity 代码高亮 1 2 3 4 5 6 7 8 9 pragma solidity ^0.8.0; contract LoginVerification { function verifySignature(address userAddress, bytes memory signature) public pure returns (bool) { bytes32 messageHash = keccak256(abi.encodePacked(userAddress)); address recoveredAddress = ecrecover(messageHash, signature); return recoveredAddress == userAddress; } } ","date":"2020-09-09T00:00:00Z","permalink":"https://zhanghony.github.io/p/codehighlight/","title":"代码高亮"},{"content":"hugo mermaid 使用 第一步 开启hugo.yaml 1 2 3 4 5 6 7 markup: goldmark: extensions: mermaid: true renderer: ## Set to true if you have HTML content inside Markdown unsafe: true 第二步 markdown 开启 1 2 mermaid: true 第三步 改造 layouts/_default/_markup/render-codeblock-mermaid.html\n1 2 3 4 5 \u0026lt;pre class=\u0026#34;mermaid\u0026#34;\u0026gt; {{- .Inner | safeHTML }} \u0026lt;/pre\u0026gt; {{ .Page.Store.Set \u0026#34;hasMermaid\u0026#34; true }} 首先在根目录的 \\layouts\\partials\\article\\components\\ 下新建文件 mermaid.html\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 \u0026lt;!-- mermaid.html --\u0026gt; {{ if .Params.mermaid }} \u0026lt;!-- 判断是否开启 --\u0026gt; \u0026lt;script type=\u0026#34;module\u0026#34;\u0026gt; import mermaid from \u0026#39;https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs\u0026#39;; mermaid.initialize({ startOnLoad: true }); \u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; // Replace mermaid pre.code to div Array.from(document.getElementsByClassName(\u0026#34;language-mermaid\u0026#34;)).forEach( (el) =\u0026gt; { el.parentElement.outerHTML = `\u0026lt;div class=\u0026#34;mermaid\u0026#34;\u0026gt;${el.innerHTML}\u0026lt;/div\u0026gt;`; } ); \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; /* Set svg to center */ .mermaid svg { display: block; margin: auto; } \u0026lt;/style\u0026gt; {{ end }} 在\\layouts\\partials\\article\\article.html 新增以下代码\n1 2 3 4 \u0026lt;!-- mermaid --\u0026gt; {{ if or .Params.mermaid .Site.Params.article.mermaid }} {{ partialCached \u0026#34;article/components/mermaid.html\u0026#34; . }} {{ end }} 文档链接 https://gohugo.io/content-management/diagrams/#process\nhttps://mermaid.js.org/syntax/flowchart.html\n例子1 1 2 3 4 5 6 7 8 9 10 11 sequenceDiagram participant Alice participant Bob Alice-\u0026gt;\u0026gt;John: Hello John, how are you? loop Healthcheck John-\u0026gt;\u0026gt;John: Fight against hypochondria end Note right of John: Rational thoughts \u0026lt;br/\u0026gt;prevail! John--\u0026gt;\u0026gt;Alice: Great! John-\u0026gt;\u0026gt;Bob: How about you? Bob--\u0026gt;\u0026gt;John: Jolly good! sequenceDiagram participant Alice participant Bob Alice-\u003e\u003eJohn: Hello John, how are you? loop Healthcheck John-\u003e\u003eJohn: Fight against hypochondria end Note right of John: Rational thoughts prevail! John--\u003e\u003eAlice: Great! John-\u003e\u003eBob: How about you? Bob--\u003e\u003eJohn: Jolly good! 例子2 1 2 3 4 5 graph TD; A[主题] --\u0026gt; B[子主题 1]; A --\u0026gt; C[子主题 2]; B --\u0026gt; D[子子主题 1]; C --\u0026gt; E[子子主题 2]; graph TD; A[主题] --\u003e B[子主题 1]; A --\u003e C[子主题 2]; B --\u003e D[子子主题 1]; C --\u003e E[子子主题 2]; 例子3 1 2 3 4 5 6 7 . . . .--- 1 .-- 1 / 1 / \\ | | .---+ .-+ + / \\ .---+---. .--+--. | \u0026#39;--- 2 | \u0026#39;-- 2 / \\ 2 + + | | | | ---+ ---+ + / \\ / \\ .-+-. .-+-. .+. .+. | .--- 3 | .-- 3 \\ / 3 / \\ / \\ | | | | | | | | \u0026#39;---+ \u0026#39;-+ + 1 2 3 4 1 2 3 4 1 2 3 4 \u0026#39;--- 4 \u0026#39;-- 4 \\ 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 --- title: Animal example --- classDiagram note \"From Duck till Zebra\" Animal \u003c|-- Duck note for Duck \"can fly\\ncan swim\\ncan dive\\ncan help in debugging\" Animal \u003c|-- Fish Animal \u003c|-- Zebra Animal : +int age Animal : +String gender Animal: +isMammal() Animal: +mate() class Duck{ +String beakColor +swim() +quack() } class Fish{ -int sizeInFeet -canEat() } class Zebra{ +bool is_wild +run() } --- title: Simple sample --- stateDiagram-v2 [*] --\u003e Still Still --\u003e [*] Still --\u003e Moving Moving --\u003e Still Moving --\u003e Crash Crash --\u003e [*] --- title: Order example --- erDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses ","date":"2020-01-02T22:24:53Z","permalink":"https://zhanghony.github.io/p/mermaid/","title":"hugo mermaid"}]